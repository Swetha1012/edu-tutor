# -*- coding: utf-8 -*-
"""EduTutor_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNjZxfkJ7Srf0w5oraHxSODUKHHs5jrb
"""

# Educational AI Application using IBM Granite Model
# Run this in Google Colab
!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ----------------- Load Model -----------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ----------------- AI Functions -----------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
    return generate_response(prompt, max_length=1000)

# ----------------- Custom CSS -----------------
custom_css = """
body, .gr-block.gr-root {
    background-color: #E6E6FA !important;
    color: #ffffff !important;
}

h1, h2, h3, h4, h5, h6, label {
    color: #ffffff !important;
}

button, .gr-button {
    background-color: #ffffff !important;
    color: #6A0DAD !important;
    font-weight: bold;
    border: 2px solid #6A0DAD !important;
}

input, textarea, .gr-textbox, .gr-input {
    background-color: #ffffff !important;
    color: #6A0DAD !important;
    border: 1px solid #6A0DAD !important;
}

.gr-tabitem {
    background-color: #E6E6FA !important;
    color: #6A0DAD !important;
}

.gr-tabitem.selected {
    background-color: #6A0DAD !important;
    color: #ffffff !important;
    font-weight: bold;
}

/* Ensure the container of logout button is relative */
#dashboard-heading {
    position: relative;
}

/* Logout Button Small and Top-Right */
#logout-btn {
    position: absolute !important;
    top: 10px;
    right: 10px;
    width: auto !important;
    height: auto !important;
    padding: 2px 10px !important;
    font-size: 12px !important;
    z-index: 1000;
}
"""

# ----------------- Interface -----------------
with gr.Blocks(css=custom_css) as app:
    username_state = gr.State("")

    # --- Login Section ---
    with gr.Column(visible=True) as login_section:
        gr.Markdown("# EduTutor AI Login")
        username_input = gr.Textbox(label="Username")
        password_input = gr.Textbox(label="Password", type="password")
        login_btn = gr.Button("Login")
        login_status = gr.Textbox(label="Login Status", interactive=False)

    # --- Main Dashboard Section ---
    with gr.Column(visible=False) as ai_dashboard:
        gr.Markdown("## Educational AI Assistant", elem_id="dashboard-heading")

        # Small Logout button at top right
        logout_btn = gr.Button("Logout", visible=False, elem_id="logout-btn")

        with gr.Tabs():
            # Concept Explanation Tab
            with gr.TabItem("Concept Explanation"):
                concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
                explain_btn = gr.Button("Explain")
                explanation_output = gr.Textbox(label="Explanation", lines=10)
                explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

            # Quiz Generator Tab
            with gr.TabItem("Quiz Generator"):
                quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
                quiz_btn = gr.Button("Generate Quiz")
                quiz_output = gr.Textbox(label="Quiz Questions", lines=15)
                quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

    # --- Login Function ---
    def login(username, password):
        return (
            "Login successful!",
            gr.update(visible=False),     # Hide login section
            gr.update(visible=True),      # Show dashboard
            gr.update(visible=True),      # Show logout button
            username                      # Save username state
        )

    login_btn.click(
        login,
        inputs=[username_input, password_input],
        outputs=[login_status, login_section, ai_dashboard, logout_btn, username_state]
    )

    # --- Logout Function ---
    def logout():
        return (
            gr.update(visible=True),     # Show login
            gr.update(visible=False),    # Hide dashboard
            gr.update(visible=False),    # Hide logout button
            "",                          # Clear login status
            "",                          # Clear username input
            "",                          # Clear password input
            "",                          # Clear concept input
            "",                          # Clear explanation output
            "",                          # Clear quiz input
            ""                           # Clear quiz output
        )

    logout_btn.click(
        logout,
        outputs=[
            login_section, ai_dashboard, logout_btn,
            login_status, username_input, password_input,
            concept_input, explanation_output,
            quiz_input, quiz_output
        ]
    )

# ----------------- Launch -----------------
app.launch(share=True)

